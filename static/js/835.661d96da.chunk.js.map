{"version":3,"file":"static/js/835.661d96da.chunk.js","mappings":"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","sources":["redux/filter/selectors.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Message/Message.styled.jsx","components/Message/Message.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ToastContainer/ToastContainer.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectFilterValue = state => state.filter.value;\n","import styled from '@emotion/styled';\nimport { css } from '@emotion/react';\n\nconst styledLabelDynamicStyle = ({ theme }) => css`\n  display: flex;\n  flex-direction: column;\n  gap: 18px;\n  color: ${theme.colors.mainColor};\n`;\n\n// export const StyledLabel = styled.label`\n//   display: flex;\n//   flex-direction: column;\n//   gap: 18px;\n//   color: ${({ theme }) => {\n//     return theme.colors.mainColor;\n//   }};\n// `;\nconst styledInputDynamicStyle = ({ theme }) => css`\n  width: 300px;\n  padding: 12px 12px 12px 15px;\n  font-size: 16px;\n  border: 2px solid ${theme.colors.mainColor};\n  border-radius: ${theme.borderRadius};\n  background-color: ${theme.colors.mainBackgroundColor};\n  color: ${theme.colors.mainColor};\n`;\n\n// export const StyledInput = styled.input`\n//   width: 300px;\n//   padding: 12px 12px 12px 15px;\n//   font-size: 16px;\n//   border: 2px solid\n//     ${({ theme }) => {\n//       return theme.colors.mainColor;\n//     }};\n//   border-radius: ${({ theme }) => {\n//     return theme.borderRadius;\n//   }};\n//   background-color: ${({ theme }) => {\n//     return theme.colors.mainBackgroundColor;\n//   }};\n//   color: ${({ theme }) => {\n//     return theme.colors.mainColor;\n//   }};\n// `;\n\nexport const StyledLabel = styled.label`\n  ${styledLabelDynamicStyle}\n`;\n\nexport const StyledInput = styled.input`\n  ${styledInputDynamicStyle}\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/slice';\nimport { selectFilterValue } from 'redux/filter/selectors';\nimport { StyledLabel, StyledInput } from './Filter.styled';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilterValue);\n  return (\n    <StyledLabel>\n      Find contacts by name\n      <StyledInput\n        name=\"filter\"\n        type=\"text\"\n        onChange={event => dispatch(setFilter(event.currentTarget.value))}\n        value={filterValue}\n      />\n    </StyledLabel>\n  );\n}\n\nexport default Filter;\n","import styled from '@emotion/styled';\nimport { css } from '@emotion/react';\n\nconst listItemDynamicStyle = ({theme}) => css`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 20px;\n  padding: 12px;\n  font-size: 16px;\n  border-radius: ${theme.borderRadius};\n  background-color: ${theme.colors.mainBackgroundColor};\n  color: ${theme.colors.mainColor};\n`\n \n// export const ListItem = styled.li`\n//   display: flex;\n//   justify-content: space-between;\n//   align-items: center;\n//   gap: 20px;\n//   padding: 12px;\n//   font-size: 16px;\n//   border-radius: ${({ theme }) => {\n//     return theme.borderRadius;\n//   }};\n//   background-color: ${({ theme }) => {\n//     return theme.colors.mainBackgroundColor;\n//   }};\n//   color: ${({ theme }) => {\n//     return theme.colors.mainColor;\n//   }};\n// `;\n\nexport const ContactInfo = styled.p`\n  margin: 0;\n`;\n\nconst styledButtonDynamicStyle = ({theme}) => css`\n   width: 70px;\n  height: 40px;\n  transform: scale(1);\n  background-color: ${theme.colors.mainColor};\n  border-radius: ${theme.borderRadius};\n  border: 2px solid ${theme.colors.mainColor};\n  color: ${theme.colors.mainBackgroundColor};\n  font-size: ${theme.fontStyles.size};\n  transition: transform 250ms ease-out, background-color 250ms ease-out;\n  &:hover,\n  &:focus-visible {\n    transform: scale(1.1);\n  }\n`\n\n// export const StyledButton = styled.button`\n//   width: 70px;\n//   height: 40px;\n//   transform: scale(1);\n//   background-color: ${({ theme }) => {\n//     return theme.colors.mainColor;\n//   }};\n//   border-radius: ${({ theme }) => {\n//     return theme.borderRadius;\n//   }};\n//   border: 2px solid\n//     ${({ theme }) => {\n//       return theme.colors.mainColor;\n//     }};\n//   color: ${({ theme }) => {\n//     return theme.colors.mainBackgroundColor;\n//   }};\n//   font-size: ${({ theme }) => {\n//     return theme.fontStyles.size;\n//   }};\n//   transition: transform 250ms ease-out, background-color 250ms ease-out;\n//   &:hover,\n//   &:focus-visible {\n//     transform: scale(1.1);\n//   }\n// `;\n\nexport const ListItem = styled.li`\n${listItemDynamicStyle}\n`\n\nexport const StyledButton = styled.button`\n${styledButtonDynamicStyle}\n`\n","import PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport { useDeleteContactMutation } from 'services/contactsApi';\nimport { ListItem, StyledButton, ContactInfo } from './ContactItem.styled';\n\nfunction ContactItem({ id, name, number }) {\n\n  const [deleteContact] = useDeleteContactMutation(); \n\n   const removeContact = async (contactId, contactName) => {\n    try {\n      await deleteContact(contactId);\n      toast.info(\n        `\"${contactName}\" has been deleted from your phone book`\n      );\n    } catch (error) {     \n      toast.error(\n        `Something has happened, \"${contactName}\" was not deleted`\n      );\n    }\n  };\n\n  return (\n    <ListItem>\n      <ContactInfo>\n        {name}: {number}\n      </ContactInfo>\n      <StyledButton type=\"button\" onClick={() => removeContact(id, name)}>\n        Delete\n      </StyledButton>\n    </ListItem>\n  );\n}\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin: 0;\n  padding: 0; \n  height: 60%;\n  overflow: auto;\n`;\n","import { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport ContactItem from 'components/ContactItem';\nimport { selectFilterValue } from 'redux/filter/selectors';\nimport { useFetchContactsQuery } from 'services/contactsApi';\nimport { List } from './ContactList.styled';\n\nfunction ContactList() {\n  const filterValue = useSelector(selectFilterValue);\n\n  const { data: contacts } = useFetchContactsQuery();\n\n  const getFilteredContacts = useMemo(\n    () => () => {\n      if (!contacts) {\n        return;\n      }\n\n      const normalizedFilter = filterValue.toLowerCase().trim();\n\n      return contacts.filter(\n        contact =>\n          contact.name.toLowerCase().includes(normalizedFilter) ||\n          contact.number.includes(normalizedFilter)\n      );\n    },\n    [contacts, filterValue]\n  );\n\n  const filteredContacts = getFilteredContacts();\n\n  return (\n    <List>\n      {filteredContacts &&\n        filteredContacts.map(({ id, name, number }) => {\n          return <ContactItem key={id} id={id} name={name} number={number} />;\n        })}\n    </List>\n  );\n}\n\nexport default ContactList;\n","import styled from '@emotion/styled';\nimport { css } from '@emotion/react';\n\nconst messageTextDynamicStyle = ([theme]) => css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0;\n  font-size: 24px;\n  width: 90%;\n  background-color: ${theme.colors.mainBackgroundColor};\n  color: ${theme.colors.mainColor};\n  border-radius: ${theme.borderRadius};\n  border: 2px solid ${theme.colors.mainColor};\n  text-align: center;\n`;\n\n// export const MessageText = styled.p`\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n//   margin: 0;\n//   font-size: 24px;\n//   width: 90%;\n//   background-color: ${({ theme }) => {\n//     return theme.colors.mainBackgroundColor;\n//   }};\n//   color: ${({ theme }) => {\n//     return theme.colors.mainColor;\n//   }};\n//   border-radius: ${({ theme }) => {\n//     return theme.borderRadius;\n//   }};\n//   border: 2px solid\n//     ${({ theme }) => {\n//       return theme.colors.mainColor;\n//     }};\n//   text-align: center;\n// `;\n\nexport const MessageText = styled.p`\n  ${messageTextDynamicStyle}\n`;\n","import PropTypes from 'prop-types';\nimport { MessageText } from './Message.styled';\n\nfunction Message({ message }) {\n  return <>{message && <MessageText>{message}</MessageText>}</>;\n}\n\nMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Message;\n","import styled from '@emotion/styled';\nimport { css } from '@emotion/react';\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 30px;\n  width: 65%;\n`;\n\nconst labelDynamicStyle = ({theme}) => css`\n  display: flex;\n  flex-direction: column;\n  gap: 18px;\n  color: ${theme.colors.mainColor};\n  div {\n    padding: 12px;\n    border: 2px solid ${theme.colors.mainColor};\n    border-radius: ${theme.borderRadius};\n    background-color: ${theme.colors.accentColor};\n    width: 100%;\n    font-size: 16px;\n    &::first-letter {\n      text-transform: uppercase;\n    }\n  }\n`\n\n// export const StyledLabel = styled.label`\n//   display: flex;\n//   flex-direction: column;\n//   gap: 18px;\n//   color: ${({ theme }) => {\n//     return theme.colors.mainColor;\n//   }};\n//   div {\n//     padding: 12px;\n//     border: 2px solid\n//       ${({ theme }) => {\n//         return theme.colors.mainColor;\n//       }};\n//     border-radius: ${({ theme }) => {\n//       return theme.borderRadius;\n//     }};\n//     background-color: ${({ theme }) => {\n//       return theme.colors.accentColor;\n//     }};\n//     width: 100%;\n//     font-size: 16px;\n//     &::first-letter {\n//       text-transform: uppercase;\n//     }\n//   }\n// `;\n\nconst inputDynamicStyle = ({theme}) => css`\n   width: 300px;\n  padding: 12px 12px 12px 15px;\n  font-size: 16px;\n  border-radius: ${theme.borderRadius};\n  border: 2px solid ${theme.colors.mainColor};\n  background-color: ${theme.colors.mainBackgroundColor};\n  color: ${theme.colors.mainColor};\n  &::placeholder {\n    color: ${theme.colors.mainColor};\n    font-size: 16px;\n  }\n`\n// export const StyledInput = styled.input`\n//   width: 300px;\n//   padding: 12px 12px 12px 15px;\n//   font-size: 16px;\n//   border-radius: ${({ theme }) => {\n//     return theme.borderRadius;\n//   }};\n//   border: 2px solid\n//     ${({ theme }) => {\n//       return theme.colors.mainColor;\n//     }};\n//   background-color: ${({ theme }) => {\n//     return theme.colors.mainBackgroundColor;\n//   }};\n//   color: ${({ theme }) => {\n//     return theme.colors.mainColor;\n//   }};\n//   &::placeholder {\n//     color: ${({ theme }) => {\n//       return theme.colors.mainColor;\n//     }};\n//     font-size: 16px;\n//   }\n// `;\n\nconst buttonDynamicStyle = ({ theme }) =>\n  css`\n    width: 100%;\n    padding: 12px;\n    color: ${theme.colors.mainColor};\n    border-radius: ${theme.borderRadius};\n    border: 2px solid ${theme.colors.mainColor};\n    font-size: ${theme.fontStyles.size};\n    font-weight: ${theme.fontStyles.weight};\n    background-color: ${theme.colors.mainBackgroundColor};\n    transition: transform 250ms ease-out, background-color 250ms ease-out;\n    &:hover,\n    &:focus-visible {\n      color: ${theme.colors.accentColor};\n      border: '2px solid ${theme.colors.accentColor}';\n      transform: 'scale(1.1)';\n    }\n  `;\nexport const StyledLabel = styled.label`\n  ${labelDynamicStyle}\n`\nexport const StyledInput = styled.input`\n  ${inputDynamicStyle}\n`\n\n  export const StyledButton = styled.button `\n    ${buttonDynamicStyle}\n  `\n\n// export const StyledButton = styled.button`\n//   width: 100%;\n//   padding: 12px;\n//   transform: scale(1);\n//   color: ${({ theme }) => {\n//     return theme.colors.mainColor;\n//   }};\n//   border-radius: ${({ theme }) => {\n//     return theme.borderRadius;\n//   }};\n//   border: 2px solid\n//     ${({ theme }) => {\n//       return theme.colors.mainColor;\n//     }};\n//   font-size: ${({ theme }) => {\n//     return theme.fontStyles.size;\n//   }};\n//   font-weight: ${({ theme }) => {\n//     return theme.fontStyles.weight;\n//   }};\n//   background-color: ${({ theme }) => {\n//     return theme.colors.mainBackgroundColor;\n//   }};\n//   transition: transform 250ms ease-out, background-color 250ms ease-out;\n//   &:hover,\n//   &:focus-visible {\n//     ${({ theme }) => ({})}\n//     color: ${({ theme }) => {\n//       return theme.colors.accentColor;\n//     }};\n//     border: 2px solid\n//       ${({ theme }) => {\n//         return theme.colors.accentColor;\n//       }};\n//     transform: scale(1.1);\n//   }\n// `;\n","import { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { toast } from 'react-toastify';\nimport { useAddContactMutation, useFetchContactsQuery } from 'services/contactsApi';\n\nimport {\n  StyledLabel,\n  StyledForm,\n  StyledInput,\n  StyledButton,\n} from './ContactForm.styled';\n\nconst nameRegex = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n\nconst numberRegex =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .trim()\n    .max(64)\n    .required('Name is required')\n    .matches(nameRegex, {\n      message:\n        \"Invalid name. Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan.\",\n    }),\n\n  number: yup\n    .string()\n    .trim()\n    .required('Number is required')\n    .min(5)\n    .matches(numberRegex, {\n      message:\n        'Invalid number. Phone number must be digits and can contain spaces, dashes, parentheses and can start with +.',\n    }),\n});\n\nfunction ContactForm() {\n  const { data: contacts } = useFetchContactsQuery();\n  const [addContact] = useAddContactMutation();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n    formState,\n  } = useForm({\n    defaultValues: {\n      name: '',\n      number: '',\n    },\n    resolver: yupResolver(schema),\n    mode: 'onTouched',\n  });\n\n  useEffect(() => {\n    if (formState.isSubmitSuccessful) {\n      reset();\n    }\n  }, [formState.isSubmitSuccessful, reset]);\n\n  const addNewContact = async data => {\n    const normalizedName = data.name.toLowerCase();\n\n    if (\n      contacts.find(item => item.name.toLowerCase() === normalizedName)\n    ) {\n      return toast.info(`${data.name} is already in contacts!`);\n    }\n    try {\n      await addContact(data);\n      toast.info('New contact has been added in your phone book');\n    } catch (error) {\n      console.log(error.message);\n      toast.error('Something has happened, new contact was not added');\n    }       \n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit(addNewContact)}>\n      <StyledLabel>\n        Name\n        <StyledInput\n          type=\"text\"\n          placeholder=\"Enter a contact name\"\n          autoComplete=\"off\"\n          {...register('name')}\n        />\n        {errors.name && <div>{errors.name?.message}</div>}\n      </StyledLabel>\n\n      <StyledLabel>\n        Number\n        <StyledInput\n          type=\"tel\"\n          placeholder=\"Enter a contact number\"\n          autoComplete=\"off\"\n          {...register('number')}\n        />\n        {errors.number && <div>{errors.number?.message}</div>}\n      </StyledLabel>\n\n      <StyledButton type=\"submit\" >Send</StyledButton>\n    </StyledForm>\n  );\n}\n\nexport default ContactForm;\n","import { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport function ToastWrapper() {\n  return (\n    <ToastContainer\n      position=\"top-right\"\n      autoClose={3000}\n      hideProgressBar={false}\n      newestOnTop={false}\n      closeOnClick\n      rtl={false}\n      pauseOnFocusLoss\n      draggable\n      pauseOnHover\n      theme=\"light\"\n    />\n  );\n}","import styled from '@emotion/styled';\nimport { css } from '@emotion/react';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 30px;\n`;\n\nexport const SectionsContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 40px;\n  justify-content: center;\n  flex-grow: 1;\n`;\n\nconst sectionDynamicStyle = ({ theme }) => css`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 30px;\n  max-width: 500px;\n  min-height: 570px;\n  padding: 20px;\n  background-color: ${theme.colors.secondaryBackgroundColor};\n  border-radius: ${theme.borderRadius};\n  box-shadow: ${theme.boxShadow};\n`;\n\n// export const Section = styled.section`\n//   display: flex;\n//   flex-direction: column;\n//   align-items: center;\n//   gap: 30px;\n//   max-width: 500px;\n//   min-height: 570px;\n//   padding: 20px;\n//   background-color: ${({ theme }) => {\n//     return theme.colors.secondaryBackgroundColor;\n//   }};\n//   border-radius: ${({ theme }) => {\n//     return theme.borderRadius;\n//   }};\n//   box-shadow: ${({ theme }) => {\n//     return theme.boxShadow;\n//   }};\n// `;\n\nexport const Title = styled.h1`\n  margin-top: 0;\n  margin-bottom: 40px;\n  text-align: center;\n  font-size: 32px;\n  text-transform: uppercase;\n`;\n\nconst sectionTitleDynamicStyle = ({ theme }) => css`\n  margin: 0;\n  text-align: center;\n  font-size: 28px;\n  color: ${theme.colors.mainColor};\n`;\n\n// export const SectionTitle = styled.h2`\n//   margin: 0;\n//   text-align: center;\n//   font-size: 28px;\n//   color: ${({ theme }) => {\n//     return theme.colors.mainColor;\n//   }};\n// `;\n\nexport const Section = styled.section`\n  ${sectionDynamicStyle}\n`;\n\nexport const SectionTitle = styled.h2`\n  ${sectionTitleDynamicStyle}\n`;\n","import { useFetchContactsQuery } from 'services/contactsApi';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\nimport Message from 'components/Message';\nimport ContactForm from 'components/ContactForm';\nimport { ToastWrapper } from 'components/ToastContainer/ToastContainer';\n\nimport {\n  Container,\n  SectionsContainer,\n  Section,\n  SectionTitle,\n} from './Contacts.styled';\n\nfunction Contacts() {\n   const {\n    data: contacts,   \n  } = useFetchContactsQuery();\n\n  const totalContacts = () => {\n    if (!contacts) {\n      return 0;\n    }\n    return contacts.length;\n  };\n\n  return (\n    <Container>\n      <SectionsContainer>\n        <Section>\n          <SectionTitle>Add contact</SectionTitle>\n          <ContactForm />\n        </Section>\n        <Section>\n          <SectionTitle>Contacts</SectionTitle>{' '}\n          {totalContacts !== 0 ? (\n            <>\n              <Filter />\n              <ContactList />\n            </>\n          ) : (\n            <Message message=\"There are no contacts in your Phonebook. Please add your first contact!\" />\n          )}\n        </Section>\n      </SectionsContainer>\n      <ToastWrapper />\n    </Container>\n  );\n}\nexport default Contacts;\n"],"names":["selectFilterValue","state","filter","value","StyledLabel","styled","theme","css","colors","mainColor","StyledInput","borderRadius","mainBackgroundColor","dispatch","useDispatch","filterValue","useSelector","name","type","onChange","event","setFilter","currentTarget","ContactInfo","ListItem","StyledButton","fontStyles","size","id","number","useDeleteContactMutation","deleteContact","removeContact","contactId","contactName","toast","onClick","List","contacts","useFetchContactsQuery","data","filteredContacts","useMemo","normalizedFilter","toLowerCase","trim","contact","includes","getFilteredContacts","map","MessageText","message","StyledForm","accentColor","weight","schema","yup","shape","max","required","matches","min","useAddContactMutation","addContact","useForm","defaultValues","resolver","yupResolver","mode","register","handleSubmit","errors","formState","reset","useEffect","isSubmitSuccessful","addNewContact","normalizedName","find","item","console","log","onSubmit","placeholder","autoComplete","ToastWrapper","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","Container","SectionsContainer","Section","secondaryBackgroundColor","boxShadow","SectionTitle","length"],"sourceRoot":""}